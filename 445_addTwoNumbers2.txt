/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
var get_length = function(l) {
    var result = 0;
    var cur    = l;
    
    while (cur) {
        result += 1;
        cur = cur.next;
    }
    return result;
}

// NOTE 
// tuple[0] is returned list.
// tuple[1] is carry.

var helper = function(l1, l2, l1Len, l2Len) {
    if (l1Len == l2Len) {
        if (l1 == null && l2 == null) {
            return [null, 0];
        } else {
            var tuple = helper(l1.next, l2.next, l1Len-1, l2Len-1);
            var val = l1.val + l2.val + tuple[1];
            var res = new ListNode(val%10, tuple[0]);
            return [res, (val >= 10) ? Math.floor(val/10) : 0];
        }
    } else {
        var longer, shorter, longerLen, shorterLen;
        if (l1Len > l2Len) {
            longer = l1, shorter = l2, longerLen = l1Len, shorterLen = l2Len;
        } else {
            longer = l2, shorter = l1, longerLen = l2Len, shorterLen = l1Len;
        }
        var tuple = helper(longer.next, shorter, longerLen-1, shorterLen);
        var val = longer.val + tuple[1];
        var res = new ListNode(val%10, tuple[0])
        return [res, (val >= 10) ? Math.floor(val/10) : 0]
    }
}

var addTwoNumbers = function(l1, l2) {
    var l1Len = get_length(l1);
    var l2Len = get_length(l2);

    // tuple[0] is returned list.
    // tuple[1] is carry.
    var tuple = helper(l1, l2, l1Len, l2Len);
    var carry   = tuple[1];
    var res     = tuple[0];
    
    if (carry) {
        res = new ListNode(carry, res);
    }
    return res;
};


